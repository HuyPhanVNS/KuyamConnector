(function () { mvcct.$$ = { and: "and", or: "or", not: "not", eq: "eq", ne: "ne", gt: "gt", ge: "ge", lt: "lt", le: "le", endswith: "endswith", startswith: "startswith", substringof: "substringof", substringofInv: "substringofInv", notSupported: "ns", encodeCondition: function (code) { if (code == "Equal" || code == "1") { return mvcct.$$.eq } else { if (code == "NotEqual" || code == "2") { return mvcct.$$.ne } else { if (code == "LessThan" || code == "4") { return mvcct.$$.lt } else { if (code == "LessThanOrEqual" || code == "8") { return mvcct.$$.le } else { if (code == "GreaterThan" || code == "16") { return mvcct.$$.gt } else { if (code == "GreaterThanOrEqual" || code == "32") { return mvcct.$$.ge } else { if (code == "StartsWith" || code == "64") { return mvcct.$$.startswith } else { if (code == "EndsWith" || code == "128") { return mvcct.$$.endswith } else { if (code == "Contains" || code == "256") { return mvcct.$$.substringofInv } else { if (code == "IsContainedIn" || code == "512") { return mvcct.$$.substringof } else { return mvcct.$$.notSupported } } } } } } } } } } } }; mvcct.Queryable = function (fop, negate) { var _filterOperator = fop || this.$$.and; return { filterOperator: function () { return _filterOperator }, get: function () { return null }, execute: function (callBack) { }, getState: function () { return null }, setState: function (state) { }, resetFilter: function () { return this }, resetSorting: function () { return this }, resetPaging: function () { return this }, setSorting: function (sortString) { return this }, setFilter: function (filterString) { return this }, setPaging: function (page, pageSize) { return this }, importSorting: function (sortString) { if (sortString == null || sortString == "") { return this } this.resetSorting(); var allConditions = sortString.split(";"); for (var i = 0; i < allConditions.length; i++) { var pair = allConditions[i].split("#"); if (pair.length < 2) { continue } this.addSort(MvcControlsToolkit_Trim(pair[0]), pair[1].indexOf("-") >= 0) } return this }, importSortingControl: function (sortingControlId) { return this.importSorting($("#" + sortingControlId + "___SortInfoAsString").val()) }, importPager: function (pagerId, pageSize) { var pager = $("#" + pagerId); this.setPaging(parseInt(pager.val()), pageSize); return this }, addSort: function (field, desc, enabled) { return this }, addCondition: function (operator, value1, value2, enabled, currType) { return this }, addConditionAsString: function (operator, field, currSearch, currType, enabled) { if (enabled === false) { return this } currSearch = MvcControlsToolkit_Parse(currSearch, currType); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { this.addCondition(operator, field, currSearch, currType, enabled) } }, open: function (logicalOperator, enabled, negate) { return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } return this.father }, importClauses: function (filterID) { var index = 0; var finished = false; var inner = this; if (this.filterOperator() != mvcct.$$.and) { inner = this.open(mvcct.$$.and, true) } while (!finished) { var ph = $("#" + filterID + "___" + index); var base = filterID + "___" + index + "___"; if (ph.length != 0) { var selector = $("#" + base + "Selected"); if (selector.length > 0 && (selector.val() == "True" || (selector.prop("checked") || false))) { var currCondition = mvcct.$$.encodeCondition($("#" + base + "Condition").val()); if (currCondition != mvcct.$$.notSupported) { var field = $("#" + filterID + "___" + index + "_f_ields").val().split(",")[0]; var currSearchDom = $("#" + base + "Search"); var currSearch = null; var currType = null; var control = $("#" + base + "Search[data-element-type], #" + base + "Search_hidden[data-element-type], #" + base + "Search___Hidden[data-element-type]"); if (control.length > 0) { currType = parseInt(control.attr("data-client-type") || "0"); var element = control[0]; currSearch = eval("MvcControlsToolkit_" + control.attr("data-element-type") + "_Get(element, currType)"); if (currType == 0 || (currType == 4 && currSearch) || (currType > 0 && currType < 4 && !isNaN(currSearch))) { inner.addCondition(currCondition, field, currSearch, currType) } } else { currSearch = currSearchDom.val(); currType = parseInt(currSearchDom.attr("data-client-type") || "0"); inner.addConditionAsString(currCondition, field, currSearch, currType) } } } } else { finished = true } index++ } if (this.filterOperator() != mvcct.$$.and) { inner.close(true) } return this } } }; mvcct.oDataQueryable = function (link, fop, options, negate) { var filter = ""; var sorting = ""; var paging = ""; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.oDataQueryable.DefaulOptions, options); return $.extend({}, ancestor, { get: function () { var res = ""; if (options.includeTotalcount) { if (res != "") { res = res + "&" } res = res + "$inlinecount=allpages" } if (filter != "") { if (res != "") { res = res + "&" } if (negate === true) { res = res + mvcct.$$.not + " (" + filter + ")" } res = res + filter } if (sorting != "") { if (res != "") { res = res + "&" } res = res + sorting } if (paging != "") { if (res != "") { res = res + "&" } res = res + paging } if (res != "") { res = link + options.connector + res } else { res = link } return res }, execute: function (callBack, errorCallback) { $.ajax({ url: this.get(), contentType: "application/json", dataType: "text", success: function (data, textStatus, jqXHR) { data = $.parseJSON(data); callBack(data, textStatus, jqXHR) }, error: errorCallback }) }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = ""; return this }, resetSorting: function () { sorting = ""; return this }, resetPaging: function () { paging = ""; return this }, setSorting: function (sortString) { sorting = sortString; return this }, setFilter: function (filterString) { filter = filterString; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = options.skip + skip + "&" + options.top + pageSize; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } field = field.replace(".", "/"); if (sorting != "") { sorting = sorting + "," } else { sorting = options.orderby } sorting = sorting + field + " " + (desc ? options.desc : options.asc); return this }, addStringCondition: function (condition, enabled) { if (enabled === false || condition == "") { return this } if (filter != "") { filter = filter + " " + this.filterOperator() + " " } else { filter = options.filter } filter = filter + condition; return this }, addCondition: function (operator, value1, value2, currType, enabled) { if (enabled === false) { return this } value1 = value1.replace(".", "/"); if (!currType) { if (mvcct.utils.isDate(value2)) { currType = 4 } else { if (mvcct.utils.isString(value2)) { currType = 0 } else { currType = 3 } } } if (value2 == null) { value2 = "null" } else { if (currType == 4) { value2 = "datetime'" + mvcct.utils.ISODate(new Date(value2.getTime() - value2.getTimezoneOffset() * 60000), true) + "'" } else { value2 = value2 + ""; if (currType <= 0) { if (mvcct.utils.isGuid(value2)) { value2 = "guid'" + value2 + "'" } else { value2 = "'" + encodeURIComponent(value2) + "'" } } } } if (operator == mvcct.$$.substringof || operator == mvcct.$$.startswith || operator == mvcct.$$.endswith) { this.addStringCondition(operator + "(" + value1 + "," + value2 + ") eq true") } else { if (operator == mvcct.$$.substringofInv) { this.addStringCondition(mvcct.$$.substringof + "(" + value2 + "," + value1 + ") eq true") } else { this.addStringCondition(value1 + " " + operator + " " + value2) } } return this }, open: function (logicalOperator, enabled, negate) { var newOption = $.extend({}, options, { connector: "", filter: "" }); var res = MvcControlsToolkit_SQueryable("", logicalOperator, newOption, negate); res.father = this; return res }, close: function (enabled) { if ((this["father"] || null) == null) { return this } var res = this.get(); if (res != "") { res = "(" + res + ")"; this.father.addStringCondition(res, enabled) } return this.father } }) }; mvcct.oDataQueryable.DefaulOptions = { includeTotalcount: true, connector: "?", skip: "$skip=", top: "$top=", orderby: "$orderby=", filter: "$filter=", desc: "desc", asc: "asc" }; mvcct.upshotQueryable = function (dataSource, fop, options, negate) { var filter = []; var sorting = []; var paging = null; var ancestor = this.Queryable(fop, negate); options = $.extend({}, mvcct.upshotQueryable.DefaulOptions, options); function getOperator(operator) { switch (operator) { case mvcct.$$.lt: return "<"; case mvcct.$$.le: return "<="; case mvcct.$$.eq: return "=="; case mvcct.$$.ne: return "!="; case mvcct.$$.ge: return ">="; case mvcct.$$.gt: return ">"; case mvcct.$$.startswith: return "StartsWith"; case mvcct.$$.endswith: return "EndsWith"; case mvcct.$$.substringofInv: return "Contains"; default: throw "The operator '" + operator + "' is not supported." } } return $.extend({}, ancestor, { get: function () { var res = ""; if (filter.length > 0) { dataSource.setFilter(filter) } else { dataSource.setFilter(null) } if (sorting.length > 0) { dataSource.setSort(sorting) } else { dataSource.setSort(null) } dataSource.setPaging(paging); return dataSource }, execute: function (callBack) { this.get(); dataSource.refresh() }, setState: function (state) { filter = state.f; sorting = state.s; paging = state.p }, getState: function () { var res = { f: filter, s: sorting, p: paging }; return res }, resetFilter: function () { filter = []; return this }, resetSorting: function () { sorting = []; return this }, resetPaging: function () { paging = null; return this }, setSorting: function (sortArray) { sorting = sortArray; return this }, setFilter: function (filterArray) { filter = filterArray; return this }, setPaging: function (page, pageSize) { if (pageSize == null || pageSize == "") { pageSize = 1 } var skip = (page - 1) * pageSize; paging = { skip: skip, take: pageSize, includeTotalCount: options.includeTotalcount }; return this }, addSort: function (field, desc, enabled) { if (enabled === false) { return this } sorting.push({ property: field, descending: desc }); return this }, addCondition: function (operator, value1, currSearch, currType, enabled) { if (enabled === false) { return this } filter.push({ property: value1, value: currSearch, operator: getOperator(operator) }); return this }, open: function (logicalOperator, enabled, negate) { throw "The method open is not supported."; return res }, close: function (enabled) { throw "The method close is not supported."; return this.father } }) }; mvcct.upshotQueryable.DefaulOptions = { includeTotalcount: true} })(); (function () { property = mvcct.utils.property; propertySet = mvcct.utils.propertySet; function a(d, c, b) { if (d == mvcct.$$.eq) { return function (e) { return property(e, c) == b } } else { if (d == mvcct.$$.gt) { return function (e) { return property(e, c) > b } } else { if (d == mvcct.$$.ge) { return function (e) { return property(e, c) >= b } } else { if (d == mvcct.$$.lt) { return function (e) { return property(e, c) < b } } else { if (d == mvcct.$$.le) { return function (e) { return property(e, c) <= b } } else { if (d == mvcct.$$.ne) { return function (e) { return property(e, c) != b } } else { if (d == mvcct.$$.startswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == 0 } } else { if (d == mvcct.$$.endswith) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) == e.length - b.length } } else { if (d == mvcct.$$.substringof) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return b.indexOf(e) >= 0 } } else { if (d == mvcct.$$.substringofInv) { return function (f) { var e = property(f, c); if (e == null || b == null) { return false } return e.indexOf(b) >= 0 } } } } } } } } } } } } mvcct.localQueryable = function (i, k, d) { var g = mvcct.Queryable(k, d); var c = []; var f = []; var e = 0; var h = 5; var l = null; function b() { var n; var o = Math.min(e, l.length); var p = Math.min(h, l.length - o); n = []; for (var m = 0; m < l.length; m++) { n.push(l[m]) } if (o > 0) { n.splice(0, o) } if (p == 0) { n = [] } else { if (p < n.length) { n.splice(p, n.length - p) } } return n } return $.extend({}, g, { get: function () { var n = this.getFilter(); var m = this.getSorting(); return function (q) { var o = []; if (n != null) { for (var p = 0; p < q.length; p++) { if (n(q[p])) { o.push(q[p]) } } } else { o = q } if (m == null) { l = o } else { l = o.sort(m) } return b() } }, getFilter: function () { if (c.length == 0) { return null } if (this.filterOperator() == mvcct.$$.and) { if (d) { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n && c[m](o) } return !n } } else { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n && c[m](o) } return n } } } else { if (d) { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n || c[m](o) } return !n } } else { return function (o) { var n = true; for (var m = 0; m < c.length; m++) { n = n || c[m](o) } return n } } } }, getSorting: function () { if (f.length == 0) { return null } return function (n, m) { for (var p = 0; p < f.length; p++) { var o = f[p](n, m); if (o != 0) { return o } } return 0 } }, execute: function (m) { if (l != null) { m(b()) } else { m(this.get()(i)) } }, setState: function (m) { l = null; c = m.f; f = m.s; e = m.ps; h = m.pt }, getState: function () { var m = { f: c, s: f, ps: e, pt: h }; return m }, resetFilter: function () { c = []; l = null; return this }, resetSorting: function () { f = []; l = null; return this }, resetPaging: function () { e = 0; return this }, setSorting: function (m) { l = null; f = m; return this }, setFilter: function (m) { l = null; c = m; return this }, setPaging: function (n, m) { if (m == null || m == "") { m = 1 } e = (n - 1) * m; h = m; return this }, addSort: function (n, o, m) { if (m === false) { return this } l = null; if (o) { f.push(function (p, q) { val1 = property(p, n); val2 = property(q, n); if (val1 < val2) { return 1 } else { if (val2 < val1) { return -1 } else { return 0 } } }) } else { f.push(function (p, q) { val1 = property(p, n); val2 = property(q, n); if (val1 < val2) { return -1 } else { if (val2 < val1) { return 1 } else { return 0 } } }) } return this }, addArrayCondition: function (n, m) { if (m === false || n == null) { return this } l = null; c = c.concat(n); return this }, addCondition: function (o, n, m, p, r) { if (p === false) { return this } var q = a(o, n, m); if (q != null) { c.push(q); l = null } return this }, open: function (m, n, p) { var o = MvcControlsToolkit_CQueryable("", m, p); o.father = this; return o }, close: function (m) { if ((this["father"] || null) == null) { return this } var n = this.getFilter(); if (n != null) { this.father.addCondition(n, m) } return this.father } }) }; mvcct.updatesManager = function (e, f, p, l, q, b, t) { var g = new Array(); if (!f) { throw "sourceViewModel is not optional" } t = t || {}; var r = null; var o = null; function n() { var M = mvcct.utils.property(f, p); if (!mvcct.utils.isArray(M)) { return } var z = []; var u = []; var C = []; var A = []; var L = []; var v = []; var y = []; var x = false; var F = 0; for (var I = 0; I < M.length; I++) { var K = ko.utils.unwrapObservable(M[I]); var E; E = ko.utils.unwrapObservable(K._inserted); if (E) { z.push(mvcct.utils.updateCopy(K)); v.push(K); A.push(K.ModelPrefix + "[" + K._tag); x = true; if (t.isChild) { if (K._fatherReference !== undefined) { y.push(K._fatherReference) } else { y.push(-1) } } if (t.children) { for (var G = 0; G < t.children.length; G++) { var w = t.children[G].expression; var D = mvcct.utils.property(K, w); if (mvcct.utils.isArray(D)) { for (var H = 0; H < D.length; H++) { D[H]._fatherReference = F; F++ } } } } continue } E = K._destroy; if (E) { u.push(mvcct.utils.property(K, l)); x = true; continue } E = ko.utils.unwrapObservable(K._modified); if (t.automodified || E) { if (mvcct.utils.changed(K)) { C.push(mvcct.utils.updateCopy(K)); L.push(K.ModelPrefix + "[" + K._tag); x = true } else { K._modified(false) } continue } } var J = false; var B = {}; B[t.updater.i] = z; B[t.updater.u] = C; B[t.updater.d] = u; if (t.isChild) { B[t.updater.f] = y } if (!b) { if (!q) { J = true } q = B } else { if (!q) { q = {}; J = true; mvcct.utils.propertySet(q, b, B) } else { mvcct.utils.propertySet(q, b, B) } } if (t.children) { for (var I = 0; I < t.children.length; I++) { var N = []; var w = t.children[I].expression; for (H = 0; H < M.length; H++) { var K = mvcct.utils.property(M[H], w); if (mvcct.utils.isArray(K)) { N.push.apply(N, K) } } t.children[I].updater.newSource(N) } } return { changes: x, i: A, u: L, _justCreated_: J, inserted: v} } function s(w, v) { if (t.children) { for (var u = 0; u < t.children.length; u++) { var x = t.children[u]; x.updater.resetAll(null, w, x.expression) } } } function d(x, w) { if (!x) { return } iPrefix = b ? b + "." + t.updater.i : t.updater.i; uPrefix = b ? b + "." + t.updater.u : t.updater.u; for (var v = 0; v < x.length; v++) { if (x[v]["_pocessed"]) { continue } var u = mvcct.utils.changeIndex(iPrefix, "", x[v].name, function (i) { return w.i[i] }); if (!u) { u = mvcct.utils.changeIndex(uPrefix, "", x[v].name, function (i) { return w.u[i] }) } if (u) { u = u.substring(1); x[v]._pocessed = true; x[v].name = u; x[v].id = mvcct.utils.idFromName(u) } } } function c(i, w, x) { if (w) { r = x; return } if (!e) { throw "updateUrl is not optional" } var v = ko.mapping.toJS(q); var u = mvcct.utils.stringify(v, t.isoDate); $.ajax({ url: e, contentType: "application/json", data: u, dataType: "text", type: "POST", success: function (z, A, y) { z = $.parseJSON(z); if (!z) { z = { errors: null} } else { if (z.errors && mvcct.utils.isArray(z.errors) && z.errors.length == 0) { z.errors = null } else { if (!z.errors) { z.errors = null } } } x(z, i, y.status) }, error: function (z, A, y) { var B = z.responseText || null; data = B ? $.parseJSON(B) : {}; if (mvcct.utils.isArray(data)) { data = { errors: data} } if (!data.errors) { data.errors = null } if (mvcct.utils.isArray(data.errors) && data.errors.length == 0) { data.errors = null } x(data, i, z.status) } }) } function m(v) { var z = mvcct.utils.property(f, p); if (!mvcct.utils.isArray(z)) { return } for (var y = 0; y < z.length; y++) { for (var w = 0; w < t.children.length; w++) { var B = mvcct.utils.property(z[y], t.children[w].expression); if (!mvcct.utils.isArray(B)) { continue } var x = []; var A = false; for (var u = 0; u < B.length; u++) { if (!B[u]["_destroy"]) { x.push(B[u]) } else { A = true } } if (A) { mvcct.utils.propertySet(z[y], t.children[w].expression, x) } } } } function k(C, D, B) { var x = mvcct.utils.property(f, p); if (!mvcct.utils.isArray(x)) { return } var z = []; for (var y = 0; y < x.length; y++) { if (!x[y]["_destroy"]) { C.accepted(x[y]); z.push(x[y]) } } if (D && D.insertedKeys) { if (mvcct.utils.isArray(D.insertedKeys)) { for (var y = 0; y < D.insertedKeys.length; y++) { var A = D.insertedKeys[y]; if (!b || b == A.destinationExpression) { var w = A.keys; if (w && w.length) { w = ko.utils.unwrapObservable(ko.mapping.fromJS(w)); var v = B.inserted; for (var u = 0; u < w.length; u++) { C.newKey(v[u], w[u]) } } break } } } else { if (mvcct.utils.isObject(D.insertedKeys)) { var w = D.insertedKeys[b]; if (w) { w = ko.utils.unwrapObservable(ko.mapping.fromJS(w)); var v = B.inserted; for (var u = 0; u < w.length; u++) { C.newKey(v[y], w[u]) } } } } } mvcct.utils.propertySet(f, p, z) } t = $.extend({}, { updater: { u: "Modified", i: "Inserted", d: "Deleted", f: "FatherReferences" }, updateCallback: function (v, i, u) { }, updatingCallback: function (u, i, v) { return u }, prepareCallback: function (i) { }, isChild: false, automodified: false }, t); if (t.children) { if (!mvcct.utils.isArray(t.children)) { t.children = [t.children] } for (var h = 0; h < t.children.length; h++) { g[t.children[h].expression] = t.children[h] } } return { options: function (i) { t = $.extend(t, i) }, declareChild: function () { t.isChild = true }, addChildUpdateManager: function (i) { if (!t.children) { t.children = [] } t.children.push(i); g[i.expression] = i; i.updater.declareChild() }, prepare: function (A, u, v, w, B) { if (!A) { return } A = ko.utils.unwrapObservable(A); if (!mvcct.utils.isArray(A)) { A = [A] } for (var z = 0; z < A.length; z++) { var y = A[z]; if (!y._inserted) { y._inserted = ko.observable(false) } if (!y._modified) { y._modified = ko.observable(false) } if (u) { mvcct.utils.Track(y, v, w) } if (B) { y.ModelPrefix = B } else { y.ModelPrefix = p } y.ModelId = mvcct.utils.idFromName(y.ModelPrefix); MvcControlsToolkit_NewTemplateName(y, y, true); if (t.children) { for (var x = 0; x < t.children.length; x++) { var C = y.ModelPrefix + "[" + y._tag + "]." + t.children[x].expression; t.children[x].updater.prepare(mvcct.utils.property(y, t.children[x].expression), u, v, w, C) } } t.prepareCallback(y) } }, newSource: function (i) { mvcct.utils.propertySet(f, p, i) }, refreshErrors: function (w, x, I) { if (!x) { x = o } var J = []; if (x && x.errors) { if (I) { if (mvcct.utils.isObject(I)) { var z = I; I = z.ModelPrefix; if (!I) { return } I = I + "[" + z._tag + "]" } for (var A = 0; A < x.errors.length > 0; A++) { if (x.errors[A].name.indexOf(I) == 0) { F = true } else { J.push(x.errors[A]) } } x.errors = J } else { J = x.errors } } if (!w) { return } w.find(".input-validation-error").removeClass("input-validation-error"); w.find(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid"); var u = w.find("[data-valmsg-summary=true]"); list = u.find("ul"); list.empty(); var F = false; if (J.length > 0) { for (var A = 0; A < J.length; A++) { var K = false; var v = J[A]; var y = v.id == "" ? null : w.find("#" + v.id); if (y != null && y.length != 0) { K = true; if (!y.hasClass("input-validation-error")) { y.addClass("input-validation-error") } var E = y.attr("data-companionpostfix"); if (typeof E !== "undefined" && E !== false) { var G = $("#" + v.id + E); if (G.length > 0 && !G.hasClass("input-validation-error")) { G.addClass("input-validation-error") } } var D = w.find("[data-valmsg-for='" + v.name + "']"); D.each(function (L, M) { var i = $(M); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } replace = $.parseJSON(i.attr("data-valmsg-replace")) !== false; if (replace) { i.empty(); $(v.errors[0]).appendTo(i) } }) } var C = J[A].name.lastIndexOf("["); if (C > 0) { var B = J[A].name.substring(0, C); var H = $("[data-valmsg-for='" + B + "']"); H.each(function (L, M) { var i = $(M); if (i.hasClass("field-validation-valid")) { i.removeClass("field-validation-valid").addClass("field-validation-error") } K = true }) } if (v.id == "" || K) { $.each(v.errors, function (i, L) { $("<li />").html(L).appendTo(list) }); F = true } } w.find("span.input-validation-error[data-element-type]").removeClass("input-validation-error") } if (F) { u.addClass("validation-summary-errors").removeClass("validation-summary-valid") } else { u.addClass("validation-summary-valid").removeClass("validation-summary-errors") } }, clearErrors: function (i, u) { this.refreshErrors(i, { errors: null }); if (u && o) { o.errors = null } }, modified: function (z, u, w, y, v) { var i = ko.utils.unwrapObservable(z); if ((!ko.utils.unwrapObservable(i._inserted)) && (!i._destroy)) { if (w) { i._modified(mvcct.utils.changed(z)) } else { if (u) { i._modified(true); mvcct.utils.Track(z, y, v) } else { i._modified(true) } } } }, inserted: function (v, u) { var i = ko.utils.unwrapObservable(u); v.push(u); i._inserted(true) }, deleted: function (v, u) { var i = ko.utils.unwrapObservable(u); if (ko.utils.unwrapObservable(i._inserted)) { v.remove(i) } else { v.destroy(i); i._modified(false) } }, arrayChanged: function (i) { return ko.computed(function () { var w = ko.utils.unwrapObservable(i); for (var v = 0; v < w.length; v++) { var u = w[v]; if (u._destroy || u._inserted() || u._modified()) { return true } } return false }) }, accepted: function (u) { var i = ko.utils.unwrapObservable(u); var w = i._destroy || i._inserted() || i._modified(); i._destroy = false; i._inserted(false); i._modified(false); if (w) { var v = i._oldValue_; if (v) { v = v(); mvcct.utils.restoreEntity(i, v.value, v.vr) } } }, newKey: function (x, z, u) { u = u || l; mvcct.utils.propertySet(x, u, z); if (t.children) { for (var v = 0; v < t.children.length; v++) { var w = t.children[v]; var y = mvcct.utils.property(x, w.expression); if (y) { for (j = 0; j < y.length; j++) { mvcct.utils.propertySet(y[j], w.external, z) } } } } }, addChild: function (y, v, A, i, u) { var x = g[v]; if (!x) { return } trData = y._oldValue_; var z = y.ModelPrefix + "[" + y._tag + "]." + v; if (trData) { trData = trData(); x.updater.prepare(A, true, trData.vr, trData.ca, z) } else { x.updater.prepare(A, true, false, false, z) } var w = property(y, u || l); propertySet(A, x.external, w); property(y, v, true).push(A); if (i) { A._inserted(true) } }, newResult: function (i, u) { if (r) { r(i, this, u) } r = null }, reset: function (u, i, w) { if (ko.utils.unwrapObservable(u._modified)) { mvcct.utils.undo(u); u._modified(false) } else { if (ko.utils.unwrapObservable(u._inserted)) { var v; if (w) { v = w } else { v = mvcct.utils.property(f, p, true) } v.remove(u) } } s(u); if (i) { this.refreshErrors(i, null, u) } }, addRelated: function (F, E, y, G, H) { var B = mvcct.utils.property(f, p); if (!B) { return } H = H || l; E = ko.utils.unwrapObservable(E); if (!mvcct.utils.isArray(E)) { E = [E] } var x = new Array(); for (var C = 0; C < E.length; C++) { var v = mvcct.utils.property(E[C], y); var u = x[v]; if (u) { u.push(E[C]) } else { x[v] = [E[C]] } } for (var C = 0; C < B.length; C++) { var I = x[mvcct.utils.property(B[C], H)]; var D = mvcct.utils.property(B[C], F, true); if (I) { if (ko.isObservable(D)) { var w = ko.utils.unwrapObservable(D); w.push.apply(w, I); D(w) } else { if (D && mvcct.utils.isArray(D)) { D.push.apply(D, I) } else { mvcct.utils.propertySet(B[C], F, ko.observableArray(I)) } } if (G) { for (var z = 0; z < I.length; z++) { var A = mvcct.utils.property(I[z], G, true); if (ko.isObservable(A)) { A.push(B[C]) } else { if (A && mvcct.utils.isArray(A)) { A.push(B[C]) } else { mvcct.utils.propertySet(I[z], G, ko.observableArray([B[C]])) } } } } } else { if (!D) { mvcct.utils.propertySet(B[C], F, ko.observableArray([])) } } } }, resetAll: function (x, w, A) { var B = null; if (w && A) { B = property(w, A, true) } var y = B || mvcct.utils.property(f, p); y = ko.utils.unwrapObservable(y); var v = []; for (var u = 0; u < y.length; u++) { var z = y[u]; if (ko.utils.unwrapObservable(z._inserted)) { continue } else { if (z._destroy) { z._destroy = false } else { if (t.automodified || ko.utils.unwrapObservable(z._modified)) { mvcct.utils.undo(z); z._modified(false) } } } v.push(z); s(z) } if (B) { B(v); this.refreshErrors(x, null, w.ModelPrefix + "[" + w._tag + "]") } else { o = null; mvcct.utils.propertySet(f, p, v); if (x) { this.refreshErrors(x) } } }, submit: function (u, x) { var w = n(); if (t.children) { for (var v = 0; v < t.children.length; v++) { if (t.children[v].updater.submit(u, true)) { w.changes = true } } } if (!t.updatingCallback(w.changes, q, b)) { return } if (!x) { if ((!u) || u.length == 0) { u = $("#_DynamicJSonFormtoSubmit_"); if (u.length == 0) { if (!e) { throw "updateUrl is not optional" } $("body").first().prepend("<form id='_DynamicJSonFormtoSubmit_' action='" + e + "' method='post'><input type='hidden' name='display.$$' value='MVCControlsToolkit.Controls.Bindings.JSONAdapter' /><input type='hidden' name='$.JSonModel' value='' class='JSonModeltoSubmit' /></form>"); u = $("#_DynamicJSonFormtoSubmit_"); u.find(".JSonModeltoSubmit").val(mvcct.utils.stringify(ko.mapping.toJS(q), t.isoDate)) } } u.submit() } else { return true } }, update: function (w, y, u) { var x = n(); if (t.children) { for (var v = 0; v < t.children.length; v++) { if (t.children[v].updater.update(w, true)) { x.changes = true } } } if (!t.updatingCallback(x.changes, q, b)) { return false } c(this, y, function (z, B, A) { if (z.errors) { d(z.errors, x) } var D = { setErrors: true, model: f, expression: p, key: l, success: !z.errors }; t.updateCallback(D, z, A); o = z; if (!z.errors) { k(B, z, x) } if (t.children) { for (var C = 0; C < t.children.length; C++) { t.children[C].updater.newResult(z, A) } if (!z.error) { m(B) } } if (u) { if (!mvcct.utils.isArray(u)) { u = [u] } for (var C = 0; C < u.length; C++) { u[C].newResult(z, A) } } if (D.setErrors && (!y)) { B.refreshErrors(w, z) } }); return true } } } })();



  